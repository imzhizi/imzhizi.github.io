<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tycho on Breeze Bless U</title><link>https://imzhizi.com/categories/tycho/</link><description>Recent content in Tycho on Breeze Bless U</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 Mar 2020 01:10:48 +0800</lastBuildDate><atom:link href="https://imzhizi.com/categories/tycho/index.xml" rel="self" type="application/rss+xml"/><item><title>个人对于 Maven 的理解</title><link>https://imzhizi.com/2020/03/%E4%B8%AA%E4%BA%BA%E5%AF%B9%E4%BA%8E-maven-%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Sat, 07 Mar 2020 01:10:48 +0800</pubDate><guid>https://imzhizi.com/2020/03/%E4%B8%AA%E4%BA%BA%E5%AF%B9%E4%BA%8E-maven-%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>Maven 一直都在使用, 但如果说是不是真的懂 Maven, 很难谈得上. 或许什么时候系统地学习一下, 但在那之前, 打算先记下自己目前对于 Maven 的理解, 之后再进行对比, 看有哪些疏漏和错误.
Maven 基础 最直观的, Maven 使用 pom.xml 文件来管理项目中所使用的依赖, 这跟 Python 的 requirement.txt、JS 的 package.json 或者是 Ruby 的 Gemfile 都类似.
不过, 其他语言的依赖文件规定的往往是某个包的最低版本, 在实际安装的时候, 很可能会安装最新版, 这个时候实际版本会形成另外一个 lock 文件, 像 package.json.lock. 但是 Maven 不会, 因为在 Maven 的一个依赖节点中, 会要求声明具体的版本.
其次, 因为和构建相关, 所以 pom.xml 中需要声明项目所属的组织、项目的名称、版本, 同时还要在 properties 节点中声明使用的 Java 版本、编码等信息, build 也是经常见到的一个节点, 但我不是很理解它的作用.
&amp;lt;!--项目信息--&amp;gt; &amp;lt;groupId\&amp;gt;域名/项目名&amp;lt;/groupId\&amp;gt; &amp;lt;artifactId\&amp;gt;项目名/组件&amp;lt;/artifactId\&amp;gt; &amp;lt;version\&amp;gt;版本&amp;lt;/version\&amp;gt; ​ &amp;lt;properties\&amp;gt; &amp;lt;!-- 可以声明编码 --&amp;gt; &amp;lt;!-- 声明 jdk 版本--&amp;gt; &amp;lt;maven.</description></item><item><title>项目反思</title><link>https://imzhizi.com/2017/11/%E9%A1%B9%E7%9B%AE%E5%8F%8D%E6%80%9D/</link><pubDate>Tue, 07 Nov 2017 00:55:29 +0800</pubDate><guid>https://imzhizi.com/2017/11/%E9%A1%B9%E7%9B%AE%E5%8F%8D%E6%80%9D/</guid><description>一个小项目 实验室接了一个小项目, 是一个网站, 急着要用, 要求两周做完. 师兄找了我和另一个同学来做, 我做后端, 她做前端. 用什么写呢? 我在这个项目开始之前刚好学了一些 Python Web( Flask ), 看到了一些感觉很不错的特性, 所以我就想用 Python 写. 我是唯一的后端, 我说用 Python, 大家都不反对, 其实也无所谓吧. Python 写起来比 Java 确实要舒服一些, 语法更简洁, 很快就部署了起来. Flask 框架本身就非常小巧, 在 Java 上都属于框架的在 Python 通过几个很小的插件, 加几行代码就解决可以一个问题.
这是个比较简单的项目, 但我完成的并不好, 甚至在项目上线的第三天, 我在半夜 1 点左右改了一个非常明显的 bug, 或许可以说出现 bug 很正常, 但那个 bug, 是因为那部分功能没测试. 我也不想再回顾, 先写下反思吧, 其他的以后有机会再说.
出现的问题 写测试 如果没有刻意练习, 很难主动写测试, 整个项目我没写一行测试代码, 也出现了很多问题. 很多时候修改了某处代码, 而类似逻辑/用到同一部分的地方却忘记修改导致出现 bug, 这种情况发生过好几次, 但在改的时候又确实没想起来, 这时候如果有写好的测试, 跑一下立刻就知道改动是否有遗漏.
Git 没意义 项目使用了 Git, 但只有一个作用就是让我和前端稍微方便地合并代码 (其实还是面对面肉眼合并).</description></item></channel></rss>